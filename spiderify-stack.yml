# IP            Hostname                     Deployment instance
# 192.168.1.136 spiderify-production-cluster-1 redis1, sentinel1
# 192.168.1.135 spiderify-production-cluster-2 redis2, sentinel2
# 192.168.1.134 spiderify-production-cluster-3 redis3, sentinel2
# docker node update --label-add cluster.redis=node1 spiderify-production-cluster-1
# docker node update --label-add cluster.redis=node2 spiderify-production-cluster-2
# docker node update --label-add cluster.redis=node3 spiderify-production-cluster-3

version: "3.8"

x-deploy-base: &deployBase
  update_config:
    order: start-first
    parallelism: 2
    delay: 10s
    failure_action: rollback
  rollback_config:
    parallelism: 0
    order: stop-first
  restart_policy:
    condition: any
    delay: 5s
    max_attempts: 5
    window: 20s

# It Is Just A Demo Of How Can We Scale All Of Our Services in Docker Swarm Without The Database Service
services:
  # The Actual Crawler Whitch Does Crawl Data From Amazon But Call Two Mock Service OF
  # Sentiment & Summarizar & Does Not Connect To Any Database (Even Cluser Of DBs)
  spiderify-api:
    image: spiderify-api:${TAG:-local}
    labels:
      docker.service: "spiderify-api"
      spiderify.service.description: "The Main Crawler For SpideriFy Stack"
      spiderify.component: "The Crawler Service"
      spiderify.service.os: "Debian"
    env_file:
      - .env
    command:
      [
        "gunicorn",
        "manage:app",
        "--bind=0.0.0.0:8080",
        "--workers=3",
        "--threads=3",
        "--timeout=600",
        "--worker-class=gevent",
        "--worker-connections=1000",
      ]
    networks:
      - app-network
    stop_grace_period: 10s
    deploy:
      mode: replicated
      replicas: 3
      <<: *deployBase

  sentiment-api:
    image: sentiment-api:${TAG:-local}
    labels:
      docker.service: "sentiment-api"
      spiderify.service.description: "The Mock Service Of Sentiment Analayzer With The Same API Design Scheam For SpideriFy Stack"
      spiderify.component: "The Mock Sentiment Analayzer Service"
      spiderify.service.os: "Debian"
    command:
      [
        "uvicorn",
        "app:app",
        "--workers",
        "4",
        "--host",
        "0.0.0.0",
        "--port",
        "8501",
      ]
    depends_on:
      - spiderify-api
    networks:
      - app-network
    deploy:
      mode: replicated
      replicas: 3
      <<: *deployBase

  summarization-api:
    image: summarization-api:${TAG:-local}
    labels:
      docker.service: "summarization-api"
      spiderify.service.description: "The Mock Service Of Summarization With The Same API Design Scheam For SpideriFy Stack"
      spiderify.component: "The Mock Summarization Service"
      spiderify.service.os: "Debian"
    command:
      [
        "uvicorn",
        "app:app",
        "--workers",
        "4",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
      ]
    depends_on:
      - spiderify-api
    networks:
      - app-network
    deploy:
      mode: replicated
      replicas: 3
      <<: *deployBase

  nginx:
    image: nginx:${TAG:-local}
    labels:
      docker.service: "Front NGINX"
      spiderify.service.description: "The Main Front Nginx Service For SpideriFy Stack That Proxy Requests To spiderify-api Service VIP Address"
      spiderify.component: "The Front NGINX (Reverse Proxy & LoadBalancer)"
      spiderify.service.os: "Alpine"
    ports:
      - "8080:80"
    depends_on:
      - spiderify-api
    networks:
      - app-network
    deploy:
      mode: replicated
      replicas: 3
      <<: *deployBase

  redis1:
    image: redis:5
    environment:
      TZ: "Asia/Tehran"
    ports:
      - target: 6379
        published: 6379
        protocol: tcp
        mode: host
    volumes:
      - redis-data-0:/data
      - redis-config-0:/conf
    networks:
      - app-network
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.cluster.redis == node1
      resources:
        limits:
          cpus: '0.7'
          memory: 100M
        reservations:
          cpus: '0.5'
          memory: 30M
    sysctls:
      net.core.somaxconn: '511'
    command: >
      bash -c "if [ ! -f /conf/redis.conf ];then
      echo 'port 6379' > /conf/redis.conf ;
      echo 'bind 0.0.0.0' >> /conf/redis.conf ;
      echo 'slave-announce-ip 192.168.1.136' >> /conf/redis.conf ;
      echo 'slave-announce-port 6379' >> /conf/redis.conf ;
      echo 'masterauth 123456' >> /conf/redis.conf;
      echo 'requirepass 123456' >> /conf/redis.conf ;
      echo 'appendonly yes' >> /conf/redis.conf ; fi &&
      redis-server /conf/redis.conf"

  redis2:
    image: redis:5
    environment:
      TZ: "Asia/Tehran"
    ports:
      - target: 6379
        published: 6379
        protocol: tcp
        mode: host
    volumes:
      - redis-data-0:/data
      - redis-config-0:/conf
    networks:
      - app-network
    depends_on:
      - redis1
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.cluster.redis == node2
      resources:
        limits:
          cpus: '0.7'
          memory: 100M
        reservations:
          cpus: '0.5'
          memory: 30M
    sysctls:
      net.core.somaxconn: '511'
    command: >
      bash -c "if [ ! -f /conf/redis.conf ];then
      echo 'port 6379' > /conf/redis.conf ;
      echo 'bind 0.0.0.0' >> /conf/redis.conf ;
      echo 'slave-announce-ip 192.168.1.135' >> /conf/redis.conf ;
      echo 'slave-announce-port 6379' >> /conf/redis.conf ;
      echo 'masterauth 123456' >> /conf/redis.conf;
      echo 'requirepass 123456' >> /conf/redis.conf ;
      echo 'replicaof 192.168.1.136 6379' >> /conf/redis.conf ;
      echo 'appendonly yes' >> /conf/redis.conf ; fi &&
      redis-server /conf/redis.conf"

  redis3:
    image: redis:5
    environment:
      TZ: "Asia/Tehran"
    ports:
      - target: 6379
        published: 6379
        protocol: tcp
        mode: host
    volumes:
      - redis-data-0:/data
      - redis-config-0:/conf
    networks:
      - app-network
    depends_on:
      - redis1
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.cluster.redis == node3
      resources:
        limits:
          cpus: '0.7'
          memory: 100M
        reservations:
          cpus: '0.5'
          memory: 30M
    sysctls:
      net.core.somaxconn: '511'
    command: >
      bash -c "if [ ! -f /conf/redis.conf ];then
      echo 'port 6379' > /conf/redis.conf ;
      echo 'bind 0.0.0.0' >> /conf/redis.conf ;
      echo 'slave-announce-ip 192.168.1.134' >> /conf/redis.conf ;
      echo 'slave-announce-port 6379' >> /conf/redis.conf ;
      echo 'masterauth 123456' >> /conf/redis.conf;
      echo 'requirepass 123456' >> /conf/redis.conf ;
      echo 'replicaof 192.168.1.136 6379' >> /conf/redis.conf ;
      echo 'appendonly yes' >> /conf/redis.conf ; fi &&
      redis-server /conf/redis.conf"

  sentinel1:
    image: redis:5
    environment:
      TZ: "Asia/Tehran"
    ports:
      - target: 26379
        published: 26379
        protocol: tcp
        mode: host
    depends_on:
      - redis1
      - redis2
      - redis3
    volumes:
      - redis-data-0:/data
      - redis-config-0:/conf
    networks:
      - app-network
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.cluster.redis == node1
      resources:
        limits:
          cpus: '0.7'
          memory: 100M
        reservations:
          cpus: '0.5'
          memory: 30M
    sysctls:
      net.core.somaxconn: '511'
    command: >
      bash -c "if [ ! -f /conf/sentinel.conf ];then
      echo 'port 26379' > /conf/sentinel.conf ;
      echo 'sentinel announce-ip 192.168.1.136' >> /conf/sentinel.conf ;
      echo 'sentinel monitor mymaster 192.168.1.136 6379 2' >> /conf/sentinel.conf ;
      echo 'sentinel auth-pass mymaster 123456' >> /conf/sentinel.conf ; fi &&
      redis-server /conf/sentinel.conf --sentinel"

  sentinel2:
    image: redis:5
    environment:
      TZ: "Asia/Tehran"
    ports:
      - target: 26379
        published: 26379
        protocol: tcp
        mode: host
    depends_on:
      - redis1
      - redis2
      - redis3
    volumes:
      - redis-data-0:/data
      - redis-config-0:/conf
    networks:
      - app-network
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.cluster.redis == node2
      resources:
        limits:
          cpus: '0.7'
          memory: 100M
        reservations:
          cpus: '0.5'
          memory: 30M
    sysctls:
      net.core.somaxconn: '511'
    command: >
      bash -c "if [ ! -f /conf/sentinel.conf ];then
      echo 'port 26379' > /conf/sentinel.conf ;
      echo 'sentinel announce-ip 192.168.1.135' >> /conf/sentinel.conf ;
      echo 'sentinel monitor mymaster 192.168.1.136 6379 2' >> /conf/sentinel.conf ;
      echo 'sentinel auth-pass mymaster 123456' >> /conf/sentinel.conf ; fi &&
      redis-server /conf/sentinel.conf --sentinel"

  sentinel3:
    image: redis:5
    environment:
      TZ: "Asia/Tehran"
    ports:
      - target: 26379
        published: 26379
        protocol: tcp
        mode: host
    depends_on:
      - redis1
      - redis2
      - redis3
    volumes:
      - redis-data-0:/data
      - redis-config-0:/conf
    networks:
      - app-network
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.cluster.redis == node3
      resources:
        limits:
          cpus: '0.7'
          memory: 100M
        reservations:
          cpus: '0.5'
          memory: 30M
    sysctls:
      net.core.somaxconn: '511'
    command: >
      bash -c "if [ ! -f /conf/sentinel.conf ];then
      echo 'port 26379' > /conf/sentinel.conf ;
      echo 'sentinel announce-ip 192.168.1.134' >> /conf/sentinel.conf ;
      echo 'sentinel monitor mymaster 192.168.1.136 6379 2' >> /conf/sentinel.conf ;
      echo 'sentinel auth-pass mymaster 123456' >> /conf/sentinel.conf ; fi &&
      redis-server /conf/sentinel.conf --sentinel"

volumes:
  redis-data-0:
  redis-config-0:

networks:
  app-network:
    external: true
