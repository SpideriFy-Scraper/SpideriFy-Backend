stages:
  - build
  - test

variables:
  TARGET_BRANCH: develope

build:
  stage: build
  tags:
    - build_test
  script:
    - git checkout origin/${TARGET_BRANCH}
    - if ! [ -a $HOME/.poetry ]; then curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | HOME=$PWD python -  ;  fi;
    - export PATH=$PWD/.poetry/bin:$PATH
    - poetry config --local cache-dir $PWD/.poetry/cache
    - poetry config --local virtualenvs.in-project true
    - poetry install --no-dev -E insecure-package -E bandit
  cache:
    paths:
      - .venv
      - .poetry

format-code:
  stage: build
  tags:
    - build_test
  image: python:3.8
  before_script:
    - echo "formatting code to comply PEP8 ............."
  rules:
    - if: '$CI_COMMIT_BRANCH == "develope"'
  script:
    - pip install black
    - black $PWD/crawler/ $PWD/app.ppy $PWD/logger/ $PWD/resources/ $PWD/models/

test-coverage-suit:
  stage: test
  tags:
    - build_test
  image: python:3.8
  rules:
    - if: '$CI_COMMIT_BRANCH == "develope"'
  needs:
    - job: format-code
  script:
    # - if ! [ -a $HOME/.poetry ]; then curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | HOME=$PWD python -  ;  fi;
    # - export PATH=$PWD/.poetry/bin:$PATH
    # - poetry config --local cache-dir $PWD/.poetry/cache
    # - poetry config --local virtualenvs.in-project true
    # - poetry install --no-dev
    - ls -alh
    - source .venv/bin/activate
    - pip install coverage
    - git checkout origin/${TARGET_BRANCH}
    - python  test_suite.py
    - coverage run test_suite.py
    - coverage report -m

safety-check:
  stage: test
  image: python:3.8
  tags:
    - build_test
  rules:
    - if: '$CI_COMMIT_BRANCH == "develope"'
  needs:
    - job: format-code
  before_script:
    - echo "Safety check for installed dependencies"
  script:
    - pip install safety
    - safety check -r requirements.txt

bandit-check:
  stage: test
  tags:
    - build_test
  image: python:3.8
  rules:
    - if: '$CI_COMMIT_BRANCH == "develope"'
  needs:
    - job: format-code
  before_script:
    - echo "bandit check for finding security issues......."
  script:
    - pip install bandit
    - bandit -r $PWD/crawler
    - bandit -r $PWD/resources
    - bandit -r $PWD/logger
    - bandit app.py

flake8-check:
  stage: test
  tags:
    - build_test
  image: python:3.8
  rules:
    - if: '$CI_COMMIT_BRANCH == "develope"'
  needs:
    - job: format-code
  before_script:
    - echo "flake8 check for finding pep issues............."
  script:
    - pip install flake8
    - flake8 $PWD/crawler/ $PWD/app.ppy $PWD/logger/ $PWD/resources/ $PWD/models/
